############MAKEFILE FOR MEDYAN####################
#
# As outlined in the install guide, the following
# libraries and compilers are needed:
#
#	GCC 4.7 and above
#	Boost 1.49 and above
#
#   If running unit tests, googletest is needed.
#
# Tweak the following compiler and library options
# for your given system.
##################################################

SOURCES_TEST             := $(shell find ./TESTS -name '*.cpp')
SOURCES_CPP              := $(shell find . -name '*.cpp' ! -path './TESTS/*')
SOURCES_CPP_WITHOUT_MAIN := $(filter-out ./MEDYAN.cpp,$(SOURCES_CPP))
SOURCES                  =  $(SOURCES_CPP)
HEADERS                  := $(shell find . -name '*.h' -o -name '*.hpp')

OBJECTS_TEST             := $(SOURCES_TEST:.cpp=.o)
OBJECTS_CPP              := $(SOURCES_CPP:.cpp=.o)
OBJECTS_CPP_WITHOUT_MAIN := $(SOURCES_CPP_WITHOUT_MAIN:.cpp=.o)
OBJECTS                  =  $(OBJECTS_CPP)

DEPENDS := $(SOURCES_TEST:.cpp=.d) $(SOURCES_CPP:.cpp=.d)

#CPP COMPILER CHOICE AND FLAGS
CXX = g++ -std=c++14
DEBUG = -g
FAST_CXX = -Os -ffast-math -fno-finite-math-only -flto -funroll-loops -DNDEBUG -mtune=native

# Compiling flags
DEPFLAGS = -MMD -MP

INCLUDES = \
-I../external \
-I/usr/local/include -I/usr/include/boost \
-I./ -IStructure -IStructure/Special      \
-IChemistry                               \
-IMechanics/                              \
-IMechanics/Minimizer                     \
-IMechanics/ForceField                    \
-IMechanics/ForceField/Volume             \
-IMechanics/ForceField/Boundary           \
-IMechanics/ForceField/Branching          \
-IMechanics/ForceField/Filament           \
-IMechanics/ForceField/Linker             \
-IMechanics/ForceField/MotorGhost         \
-IMechanics/ForceField/Bubble             

CPPFLAGS = $(INCLUDES)

CXXFLAGS_CXX = $(FAST_CXX) \
-Wall -Wno-sign-compare \
-Wno-maybe-uninitialized -Wno-uninitialized \
-Wno-unknown-warning-option

# Linking flags
LDLIBS      = -L/usr/local/lib/ -lboost_system

LDFLAGS_CXX = $(FAST_CXX)


#################MAIN USER MACROS#################
#
# Please set these macros according to the 	
# desired simulation type. See the install
# and usage guides for more details.
#
##################################################

#Initialize chemical components of system
CPPFLAGS += -DCHEMISTRY
#Initialize mechanical components of system
CPPFLAGS += -DMECHANICS
#Use dynamic rate changing
CPPFLAGS += -DDYNAMICRATES

#Boost memory macros
CPPFLAGS += -DBOOST_MEM_POOL
CPPFLAGS += -DBOOL_POOL_NSIZE=65536

#serialized energy minimization                                                          
CPPFLAGS += -DSERIAL

#Detailed chemistry macros. 
#FOR ALL STANDARD FUNCTIONALITY, NONE OF THESE SHOULD BE TURNED OFF!!!

#Track dependents. Needed for Gillespie and NRM algorithm
CPPFLAGS += -DTRACK_DEPENDENTS

#Track zero copy and max copy number.
#For passivating and activating reactions accordingly
CPPFLAGS += -DTRACK_ZERO_COPY_N
CPPFLAGS += -DTRACK_UPPER_COPY_N
#CPPFLAGS += -DDEBUGCONSTANTSEED

#Reaction signaling. Needed for all Filament, Linker,
#Motor, and BranchingPoint reactions in system
CPPFLAGS += -DREACTION_SIGNALING

#Species signaling
CPPFLAGS += -DRSPECIES_SIGNALING

# Implementation fix (should be turned on by default)
CPPFLAGS += -DPLOSFEEDBACK

CPPFLAGS += -DHYBRID_NLSTENCILLIST
CPPFLAGS += -DNLSTENCILLIST

# Non-CUDA specific
CPPFLAGS_CXX      = $(CPPFLAGS)
CPPFLAGS_CXX_TEST = $(CPPFLAGS_CXX) -DTESTING

################MAKEFILE OPTIONS###################
#
#	
#   make [all]        - makes everything
#   make clean	      - remove all files 
#						generated by make
#
##################################################

all: MEDYAN

# Build main program
MEDYAN: $(OBJECTS)
	$(CXX) $(LDFLAGS_CXX) -o MEDYAN $(OBJECTS) $(LDLIBS)

# Build test
medyan_test: $(OBJECTS_CPP_WITHOUT_MAIN) $(OBJECTS_TEST)
	$(CXX) $(LDFLAGS_CXX) -o $@ $(OBJECTS_CPP_WITHOUT_MAIN) $(OBJECTS_TEST) $(LDLIBS)

# Compile to object and generate dependency
test_%.o: test_%.cpp
test_%.o: test_%.cpp test_%.d
	$(CXX) $(DEPFLAGS) $(CPPFLAGS_CXX_TEST) $(CXXFLAGS_CXX) -c -o $@ $<

%.o: %.cpp
%.o: %.cpp %.d 
	$(CXX) $(DEPFLAGS) $(CPPFLAGS_CXX) $(CXXFLAGS_CXX) -c -o $@ $<

# Add empty dependency for dependencies
%.d: ;

clean:
	\find . -name "*.d" -delete
	\find . -name "*.o" -delete
	\rm -f MEDYAN medyan_test

.PRECIOUS: %.d

.PHONY: all clean

include $(wildcard $(DEPENDS))
