############MAKEFILE FOR MEDYAN####################
#
# As outlined in the install guide, the following
# libraries and compilers are needed:
#
#	GCC 4.7 and above
#	Boost 1.49 and above
#	GSL
#
#   If running unit tests, googletest is needed.
#
# Tweak the following compiler and library options
# for your given system.
##################################################

TESTS	:= $(shell find ./TESTS -name 'test_*')
SOURCES_CPP := $(shell find . -name '*.cpp' ! -path './TESTS/*')
SOURCES_CU  := $(shell find . -name '*.cu'  ! -path './TESTS/*')
SOURCES = $(SOURCES_CPP) $(SOURCES_CU)
HEADERS := $(shell find . -name '*.h')

OBJECTS_CPP := $(SOURCES_CPP:.cpp=.o)
OBJECTS_CU  := $(SOURCES_CU:.cu=.o)
OBJECTS = $(OBJECTS_CPP) $(OBJECTS_CU)

# Compiler and linker choice
CXX = /usr/bin/g++ -std=c++11
NVCC = nvcc -std=c++11

# Flags used by compiler and linker
DEBUG = -g
FAST_CXX = -Os -ffast-math -flto -funroll-loops -DNDEBUG -mtune=native

# Compiler flags
INCLUDES = -I/usr/local/include -I/usr/include/boost \
-I./ -IStructure -IStructure/Special      \
-IStructure/SurfaceMesh                   \
-IChemistry                               \
-IMechanics/                              \
-IMechanics/Minimizer                     \
-IMechanics/ForceField                    \
-IMechanics/ForceField/Volume             \
-IMechanics/ForceField/VolumeConservation \
-IMechanics/ForceField/Boundary           \
-IMechanics/ForceField/Branching          \
-IMechanics/ForceField/Filament           \
-IMechanics/ForceField/Linker             \
-IMechanics/ForceField/Membrane           \
-IMechanics/ForceField/MotorGhost         \
-IMechanics/ForceField/Bubble             \
#-IMechanics/ForceField/Membrane           \

INCLUDES_NVCC = $(INCLUDES) -I/usr/local/include -I/usr/local/cuda/include

CXXFLAGS_CXX = $(FAST_CXX) -Wall -Wno-sign-compare -Wno-maybe-uninitialized \
-Wno-uninitialized -Wno-unknown-warning-option $(INCLUDES)
CXXFLAGS_NVCC = -g -G -x=cu -arch=sm_35 -Xcompiler -lpthread -ldl -lrt \
-lineinfo --compiler-options -O0 -Xptxas -v $(INCLUDES_NVCC)

# Linker flags
LDLIBS = -L/usr/local/lib/ -lboost_system
LDLIBS_NVCC = $(LDLIBS) -L/usr/local/cuda/lib64 -L/usr/local/cuda/lib -Icudart -lpthread -lnvToolsExt
LDFLAGS_CXX = $(FAST_CXX)

#################MAIN USER MACROS#################
#
# Please set these macros according to the
# desired simulation type. See the install
# and usage guides for more details.
#
##################################################

#Initialize chemical components of system
CPPFLAGS += -DCHEMISTRY
#Initialize mechanical components of system
CPPFLAGS += -DMECHANICS
#Use dynamic rate changing
CPPFLAGS += -DDYNAMICRATES
#neighbors list calculations
CPPFLAGS += -DNLORIGINAL

#Boost memory macros
CPPFLAGS += -DBOOST_MEM_POOL
CPPFLAGS += -DBOOL_POOL_NSIZE=65536

#if compiling the testing suite
#CPPFLAGS += -DTESTING

#Detailed chemistry macros.
#FOR ALL STANDARD FUNCTIONALITY, NONE OF THESE SHOULD BE TURNED OFF!!!

#Track dependents. Needed for Gillespie and NRM algorithm
CPPFLAGS += -DTRACK_DEPENDENTS

#Track zero copy and max copy number.
#For passivating and activating reactions accordingly
CPPFLAGS += -DTRACK_ZERO_COPY_N
CPPFLAGS += -DTRACK_UPPER_COPY_N
CPPFLAGS += -DDEBUGCONSTANTSEED
#Reaction signaling. Needed for all Filament, Linker,
#Motor, and BranchingPoint reactions in system
CPPFLAGS += -DREACTION_SIGNALING

#Species signaling
CPPFLAGS += -DRSPECIES_SIGNALING

#CUDA specific
CPPFLAGS_NVCC = $(CPPFLAGS) -DCUDAACCL

#Non-CUDA specific
CPPFLAGS_CXX = $(CPPFLAGS) -DSERIAL

################MAKEFILE OPTIONS###################
#
#
#   make [all]        - makes everything
#   make Makefile.dep - makes dependencies
#   make clean	      - remove all files
#						generated by make
#
#	Use USING_CUDA=true to make cuda version
#
##################################################

all: medyan

medyan: $(OBJECTS)
ifeq ($(USING_CUDA), true)
	$(NVCC) -o MEDYAN $(OBJECTS) $(LDLIBS_NVCC)
else
	$(CXX) $(LDFLAGS_CXX) -o MEDYAN $(OBJECTS) $(LDLIBS)
endif

%.o: %.cpp 
	$(CXX) $(CPPFLAGS_CXX) $(CXXFLAGS_CXX) -c $< -o $@

%.o: %.cu
ifeq ($(USING_CUDA), true)
	$(NVCC) $(CPPFLAGS_NVCC) $(CXXFLAGS_NVCC) -c $< -o $@
else
	$(CXX) $(CPPFLAGS_CXX) $(CXXFLAGS_CXX) -xc++ -c $< -o $@
endif

clean:
	\find . -name '*.o' -delete
	\rm -f MEDYAN

Makefile.dep: $(SOURCES) $(HEADERS)
	@echo "Updating the dependency file: Makefile.dep"
ifeq ($(USING_CUDA), true)
	$(SHELL) -ec '$(NVCC) -MM $(CPPFLAGS_NVCC) $(INCLUDES_NVCC)  $(filter %.cpp %.cu,$^) \
	| sed '\''s/^\(.*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
	[ -s $@ ] || rm -f $@'
else
	$(SHELL) -ec '$(CXX) -MM -xc++ $(CPPFLAGS_CXX) $(INCLUDES)  $(filter %.cpp %.cu,$^) \
	| sed '\''s/^\(.*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
	[ -s $@ ] || rm -f $@'
endif

include Makefile.dep
